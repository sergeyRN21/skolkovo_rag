# backup.py
import os
import shutil
import zipfile
from datetime import datetime

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backup –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists("backup"):
            os.makedirs("backup")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞ —Å –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup/skolovo_backup_{timestamp}"
        zip_name = f"{backup_name}.zip"
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –î–æ–±–∞–≤–ª—è–µ–º chroma_db
            if os.path.exists("chroma_db"):
                for root, dirs, files in os.walk("chroma_db"):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, ".")
                        zipf.write(file_path, arc_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º data
            if os.path.exists("data"):
                for root, dirs, files in os.walk("data"):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, ".")
                        zipf.write(file_path, arc_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º YAML —Ñ–∞–π–ª—ã
            yaml_files = ["corrections.yaml", "users.yaml"]
            for yaml_file in yaml_files:
                if os.path.exists(yaml_file):
                    zipf.write(yaml_file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º logs
            if os.path.exists("logs"):
                for root, dirs, files in os.walk("logs"):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, ".")
                        zipf.write(file_path, arc_path)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {zip_name}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
        cleanup_old_backups()
        
        return zip_name
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def cleanup_old_backups():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7."""
    try:
        backup_files = [f for f in os.listdir("backup") if f.startswith("skolovo_backup_") and f.endswith(".zip")]
        backup_files.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7
        for old_backup in backup_files[7:]:
            os.remove(os.path.join("backup", old_backup))
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")

def restore_backup(backup_file):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."""
    try:
        if not os.path.exists(backup_file):
            print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
            return False
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(backup_file, 'r') as zipf:
            zipf.extractall(".")
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {backup_file}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def list_backups():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
    try:
        if not os.path.exists("backup"):
            return []
        
        backup_files = [f for f in os.listdir("backup") if f.startswith("skolovo_backup_") and f.endswith(".zip")]
        backup_files.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        return backup_files
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        return []

if __name__ == "__main__":
    print("üîß –£—Ç–∏–ª–∏—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –°–∫–æ–ª–∫–æ–≤–æ'")
    print("1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
    print("3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")
    
    if choice == "1":
        create_backup()
    elif choice == "2":
        backups = list_backups()
        if backups:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
            for i, backup in enumerate(backups, 1):
                print(f"{i}. {backup}")
        else:
            print("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    elif choice == "3":
        backups = list_backups()
        if backups:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
            for i, backup in enumerate(backups, 1):
                print(f"{i}. {backup}")
            
            try:
                index = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ")) - 1
                if 0 <= index < len(backups):
                    restore_backup(os.path.join("backup", backups[index]))
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        else:
            print("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")